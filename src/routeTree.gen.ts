/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as SettingsImport } from "./routes/settings";
import { Route as SearchImport } from "./routes/search";
import { Route as AuthenticateImport } from "./routes/authenticate";
import { Route as IndexImport } from "./routes/index";
import { Route as SubjectsIndexImport } from "./routes/subjects.index";
import { Route as SubjectsSubjIdImport } from "./routes/subjects.$subjId";
import { Route as ReviewsSummaryImport } from "./routes/reviews/summary";
import { Route as ReviewsSettingsImport } from "./routes/reviews/settings";
import { Route as ReviewsSessionImport } from "./routes/reviews/session";
import { Route as LessonsSummaryImport } from "./routes/lessons/summary";
import { Route as LessonsSettingsImport } from "./routes/lessons/settings";
import { Route as LessonsSessionImport } from "./routes/lessons/session";
import { Route as LessonsQuizImport } from "./routes/lessons/quiz";

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  path: "/settings",
  getParentRoute: () => rootRoute,
} as any);

const SearchRoute = SearchImport.update({
  path: "/search",
  getParentRoute: () => rootRoute,
} as any);

const AuthenticateRoute = AuthenticateImport.update({
  path: "/authenticate",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const SubjectsIndexRoute = SubjectsIndexImport.update({
  path: "/subjects/",
  getParentRoute: () => rootRoute,
} as any);

const SubjectsSubjIdRoute = SubjectsSubjIdImport.update({
  path: "/subjects/$subjId",
  getParentRoute: () => rootRoute,
} as any);

const ReviewsSummaryRoute = ReviewsSummaryImport.update({
  path: "/reviews/summary",
  getParentRoute: () => rootRoute,
} as any);

const ReviewsSettingsRoute = ReviewsSettingsImport.update({
  path: "/reviews/settings",
  getParentRoute: () => rootRoute,
} as any);

const ReviewsSessionRoute = ReviewsSessionImport.update({
  path: "/reviews/session",
  getParentRoute: () => rootRoute,
} as any);

const LessonsSummaryRoute = LessonsSummaryImport.update({
  path: "/lessons/summary",
  getParentRoute: () => rootRoute,
} as any);

const LessonsSettingsRoute = LessonsSettingsImport.update({
  path: "/lessons/settings",
  getParentRoute: () => rootRoute,
} as any);

const LessonsSessionRoute = LessonsSessionImport.update({
  path: "/lessons/session",
  getParentRoute: () => rootRoute,
} as any);

const LessonsQuizRoute = LessonsQuizImport.update({
  path: "/lessons/quiz",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/authenticate": {
      id: "/authenticate";
      path: "/authenticate";
      fullPath: "/authenticate";
      preLoaderRoute: typeof AuthenticateImport;
      parentRoute: typeof rootRoute;
    };
    "/search": {
      id: "/search";
      path: "/search";
      fullPath: "/search";
      preLoaderRoute: typeof SearchImport;
      parentRoute: typeof rootRoute;
    };
    "/settings": {
      id: "/settings";
      path: "/settings";
      fullPath: "/settings";
      preLoaderRoute: typeof SettingsImport;
      parentRoute: typeof rootRoute;
    };
    "/lessons/quiz": {
      id: "/lessons/quiz";
      path: "/lessons/quiz";
      fullPath: "/lessons/quiz";
      preLoaderRoute: typeof LessonsQuizImport;
      parentRoute: typeof rootRoute;
    };
    "/lessons/session": {
      id: "/lessons/session";
      path: "/lessons/session";
      fullPath: "/lessons/session";
      preLoaderRoute: typeof LessonsSessionImport;
      parentRoute: typeof rootRoute;
    };
    "/lessons/settings": {
      id: "/lessons/settings";
      path: "/lessons/settings";
      fullPath: "/lessons/settings";
      preLoaderRoute: typeof LessonsSettingsImport;
      parentRoute: typeof rootRoute;
    };
    "/lessons/summary": {
      id: "/lessons/summary";
      path: "/lessons/summary";
      fullPath: "/lessons/summary";
      preLoaderRoute: typeof LessonsSummaryImport;
      parentRoute: typeof rootRoute;
    };
    "/reviews/session": {
      id: "/reviews/session";
      path: "/reviews/session";
      fullPath: "/reviews/session";
      preLoaderRoute: typeof ReviewsSessionImport;
      parentRoute: typeof rootRoute;
    };
    "/reviews/settings": {
      id: "/reviews/settings";
      path: "/reviews/settings";
      fullPath: "/reviews/settings";
      preLoaderRoute: typeof ReviewsSettingsImport;
      parentRoute: typeof rootRoute;
    };
    "/reviews/summary": {
      id: "/reviews/summary";
      path: "/reviews/summary";
      fullPath: "/reviews/summary";
      preLoaderRoute: typeof ReviewsSummaryImport;
      parentRoute: typeof rootRoute;
    };
    "/subjects/$subjId": {
      id: "/subjects/$subjId";
      path: "/subjects/$subjId";
      fullPath: "/subjects/$subjId";
      preLoaderRoute: typeof SubjectsSubjIdImport;
      parentRoute: typeof rootRoute;
    };
    "/subjects/": {
      id: "/subjects/";
      path: "/subjects";
      fullPath: "/subjects";
      preLoaderRoute: typeof SubjectsIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  AuthenticateRoute,
  SearchRoute,
  SettingsRoute,
  LessonsQuizRoute,
  LessonsSessionRoute,
  LessonsSettingsRoute,
  LessonsSummaryRoute,
  ReviewsSessionRoute,
  ReviewsSettingsRoute,
  ReviewsSummaryRoute,
  SubjectsSubjIdRoute,
  SubjectsIndexRoute,
});

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/authenticate",
        "/search",
        "/settings",
        "/lessons/quiz",
        "/lessons/session",
        "/lessons/settings",
        "/lessons/summary",
        "/reviews/session",
        "/reviews/settings",
        "/reviews/summary",
        "/subjects/$subjId",
        "/subjects/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/authenticate": {
      "filePath": "authenticate.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/lessons/quiz": {
      "filePath": "lessons/quiz.tsx"
    },
    "/lessons/session": {
      "filePath": "lessons/session.tsx"
    },
    "/lessons/settings": {
      "filePath": "lessons/settings.tsx"
    },
    "/lessons/summary": {
      "filePath": "lessons/summary.tsx"
    },
    "/reviews/session": {
      "filePath": "reviews/session.tsx"
    },
    "/reviews/settings": {
      "filePath": "reviews/settings.tsx"
    },
    "/reviews/summary": {
      "filePath": "reviews/summary.tsx"
    },
    "/subjects/$subjId": {
      "filePath": "subjects.$subjId.tsx"
    },
    "/subjects/": {
      "filePath": "subjects.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
